import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
	ext {
		springBootVersion = '3.2.2'
		kotlinVersion = '1.9.22'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
	}
}

allprojects {
	group = 'par-king'
	version = '0.0.1-SNAPSHOT'

	apply plugin: "org.sonarqube"

	repositories {
		getRepositories()
		mavenLocal()
		mavenCentral()
	}

	sonarqube {
		properties {
			property "sonar.exclusions", "**/generated/**, **/lib/**, **/configuration/**, **/*.js , **/*.groovy, " +
					"**/*.xml, src/test/**"
		}
	}
}

subprojects {
	apply {
		apply plugin: "java"
		apply plugin: "kotlin"
		apply plugin: "kotlin-spring"
		apply plugin: "org.springframework.boot"
		apply plugin: "io.spring.dependency-management"
		apply plugin: "jacoco"
		apply plugin: "groovy"
		apply plugin: 'kotlin-kapt'
		apply plugin: "org.sonarqube"
	}

	dependencies {
		compileOnly("org.springframework.boot:spring-boot-starter-aop")
		compileOnly("org.springframework.boot:spring-boot-starter-web")
//		implementation("org.springframework.boot:spring-boot-starter-security")
		implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.10.2")
		implementation("com.fasterxml.jackson.module:jackson-module-afterburner")
		testImplementation("org.springframework.boot:spring-boot-starter-test") {
			exclude module: "junit"
		}
		implementation("org.jetbrains.kotlin:kotlin-reflect")
		testImplementation("org.mockito:mockito-junit-jupiter:2.23.0")
		testImplementation("org.junit.jupiter:junit-jupiter:5.6.0")
		testImplementation("io.kotest:kotest-runner-junit5:4.6.1")
		testImplementation("io.mockk:mockk:1.12.0")
		testImplementation("io.kotest:kotest-property:4.6.1")
	}

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	tasks.withType(KotlinCompile).configureEach {
		compilerOptions {
			freeCompilerArgs = ['-Xjsr305=strict']
			jvmTarget.set(JvmTarget.JVM_21)
		}
	}

	jacocoTestReport {
		reports {
			xml.setRequired(true)
			csv.setRequired(true)
		}
	}

	test {
		useJUnitPlatform()
		finalizedBy(jacocoTestReport)
	}
}

